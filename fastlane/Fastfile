# Customise this file, documentation can be found here:
# https://github.com/KrauseFx/fastlane/tree/master/docs
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
# opt_out_usage

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.26.0"

default_platform :ios


platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    # increment_build_number

    # gym(scheme: "armoredSkeleton", workspace: "armoredSkeleton.xcworkspace") # Build your app - more options available

    # xctool # run the tests of your app
  end

  desc "Runs all the tests"
  lane :test do
    snapshot
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
	lane :beta do

	    create_keychain(
	      default_keychain: true,
	      unlock: true,
	      timeout: 3600,
	      lock_when_sleeps: true
	    )

		import_certificate certificate_path: "Resources/ios_distribution.cer"
    	import_certificate certificate_path: "Resources/ios_distribution.p12", certificate_password: ENV["cube999"]
		# Download provisioning profiles
		sigh(
#			app_identifier: "vc.cube.armoredSkeleton",
#			adhoc: true
		)
		ENV["PROFILE_UDID"] = lane_context[SharedValues::SIGH_UDID]
		# Build
	    gym(
	      scheme: "armoredSkeleton",
	    )
		# Push to Crashlytics
		crashlytics(
			crashlytics_path: "./Crashlytics.framework",
			groups: "phi"
		)
	end




  desc "Deploy a new version to the App Store"
  desc "** Full Markdown** Support: `code`"
  lane :deploy do
    snapshot
    sigh
    PROVISIONING_PROFILE = "$(PROFILE_UDID)";
    # deliver(skip_deploy: true, force: true)
    # frameit
  end

  ########################################

  desc "社内向け配信"
  lane :inhouse do
    sigh(
      adhoc: true,
    )
    PROVISIONING_PROFILE = "$(PROVISIONING_PROFILE)";
    gym(
      scheme: 'Release',
    )
  end

  ########################################

  lane :adhoc do


    sigh(
    )
    ENV["e0d61152-2f3c-4b98-ada9-d8418b355038"] = lane_context[SharedValues::SIGH_UDID]
    gym(
      scheme: "armoredSkeleton",
      configuration: "AdHoc",
    )
    crashlytics(
      crashlytics_path: "./Crashlytics.framework",
      groups: "phi",
      api_token: "5bdbe9ae6136390bc29a6acb9e1dd772d61ec229",
      build_secret: "fd5426806991b769ee69e8cdfb5f925cb6d45367e68b531342b1d7fc0d776562",
      notifications: true
    )
  end

  ########################################

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end

# More information about multiple platforms in fastlane:
# https://github.com/KrauseFx/fastlane/blob/master/docs/Platforms.md
